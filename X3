#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define LINESIZE 100
#define TABLESIZE 1406
#define DATA 1406

struct tag_date
{
  int month;
  int day;
  int year;
} date;

typedef struct tag_date tag_date;

typedef struct tag_ocean
{
  tag_date date;
  float T_degC;
  float PO4uM;
  float SiO3uM;
  float NO2uM;
  float NO3uM;
  float Salnty;
  float O2ml_L;
} ocean;

void swap(ocean *ocean1, ocean *ocean2);
int compareDates(tag_date date1, tag_date date2);
void insertionSort(ocean values[], int n);
void printValues(ocean values[]);
void equal(ocean *ocean1, ocean *ocean2);
int binarySearch(ocean arr[], int left, int right, ocean x);
int interpolationSearch(ocean arr[], int left, int right, ocean x);

int main()
{
  FILE *fp = fopen("ocean.csv", "r"); //  read mode
  if (!fp)
  {
    printf("fuck you");
    exit(0);
  }
  char buff[1024];
  ocean values[DATA]; // array

  int i = 0;
  char *field = (char *)malloc(sizeof(char) * LINESIZE);
  char *date_str = (char *)malloc(sizeof(char) * 10 + 1);
  while (fgets(field, LINESIZE - 1, fp) != NULL)
  {
    strcpy(date_str, strtok(field, ","));
    values[i].T_degC = atof(strtok(NULL, ","));
    values[i].PO4uM = atof(strtok(NULL, ","));
    values[i].SiO3uM = atof(strtok(NULL, ","));
    values[i].NO2uM = atof(strtok(NULL, ","));
    values[i].NO3uM = atof(strtok(NULL, ","));
    values[i].Salnty = atof(strtok(NULL, ","));
    values[i].O2ml_L = atof(strtok(NULL, ","));
    values[i].date.month = atoi(strtok(date_str, "/")); /* month, range 0 to 11             */
    values[i].date.day = atoi(strtok(NULL, "/"));       /* day of the month, range 1 to 31  */
    values[i].date.year = atoi(strtok(NULL, "/"));

    i++;
  }

  free(field);
  free(date_str);
  fclose(fp);
  insertionSort(values, DATA);
  // printValues(values);

  ocean x;
  printf("Give month, day and year\n");
  scanf("%d%d%d", &x.date.month, &x.date.day, &x.date.year);
  int n;
  insertionSort(values, DATA + 1); //
  // printValues(values);
  n = interpolationSearch(values, 0, DATA, x);
  printf("%d\n", n);
  if (n != -1)
  {
    int choice;
    printf("1.Temperature\n2.Phosphate\n3.Both\n(1, 2 or 3)\n");
    scanf("%d", &choice);
    if (choice == 1)
    {
      printf("%.2f", values[n].T_degC);
    }
    if (choice == 2)
    {
      printf("\nPhosphate = %.2f", values[n].PO4uM);
    }
    if (choice == 3)
    {
      printf("\nTemperature = %.2f\tPhosphate = %.2f", values[n].T_degC, values[n].PO4uM);
    }
  }
  else
  {
    printf("'date not found.\n");
  }
  return 0;
}

void printValues(ocean values[])
{
  int i = 1;
  printf("~~~~~~~~~~~~~~~~~~~~~~~~\n");

  for (i = 1; i < DATA; i++)
  {
    printf("%d\t%d\t%d\n", values[i].date.month, values[i].date.day, values[i].date.year);
  }
}

int compareDates(tag_date date1, tag_date date2) // date1-date2.
{
  if (date1.year > date2.year)
  {
    return 1;
  }
  else if (date1.year < date2.year)
  {
    return -1;
  }
  else if (date1.year == date2.year)
  {
    if (date1.month > date2.month)
    {
      return 1;
    }
    else if (date1.month < date2.month)
    {
      return -1;
    }
    else if (date1.month == date2.month)
    {
      if (date1.day > date2.day)
      {
        return 1;
      }
      else if (date1.day < date2.day)
      {
        return -1;
      }
      else
        return 0;
    }
  }
}

void insertionSort(ocean values[], int n)
{

  int i, j;
  ocean key;
  for (i = 1; i < n; i++)
  {
    key.date = values[i].date;
    j = i - 1;

    while (j >= 0 && compareDates(values[j].date, key.date) > 0)
    {
      values[j + 1] = values[j];
      j = j - 1;
    }
    values[j + 1] = key;
  }
}

int binarySearch(ocean arr[], int low, int high, ocean x)
{

  while (high >= low)
  {
    int mid = low + (high - low) / 2;
    if (compareDates(arr[mid].date, x.date) == 0)
    {
      return mid;
    }
    else if (compareDates(arr[mid].date, x.date) > 0)
    {
      high = mid - 1;
    }
    else if (compareDates(arr[mid].date, x.date) < 0)
    {
      low = mid + 1;
    }
  }

  return -1;
}

int interpolationSearch(ocean arr[], int low, int high, ocean x)
{
  int pos;
  if (low <= high && compareDates(x.date, arr[low].date) >= 0 && compareDates(x.date, arr[high].date) <= 0)
  {
    if (x.date.year != arr[low].date.year)
    {
      pos = low + abs((high - low) * (x.date.year - arr[low].date.year) / (arr[high].date.year - arr[low].date.year));
    }
    else if (x.date.month != arr[low].date.month)
    {
      pos = low + abs((high - low) * (x.date.month - arr[low].date.month) / (arr[high].date.month - arr[low].date.month));
    }
    else
      pos = low;

    if (compareDates(arr[pos].date, x.date) == 0)
    {
      return pos;
    }

    if (compareDates(arr[pos].date, x.date) < 0)
    {
      return interpolationSearch(arr, pos + 1, high, x);
    }

    if (compareDates(arr[pos].date, x.date) > 0)
    {
      return interpolationSearch(arr, low, pos - 1, x);
    }
  }

  return -1;
}
